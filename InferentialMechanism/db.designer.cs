#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InferentialMechanism
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db")]
	public partial class Db : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConclusions(Conclusions instance);
    partial void UpdateConclusions(Conclusions instance);
    partial void DeleteConclusions(Conclusions instance);
    partial void InsertConsultations(Consultations instance);
    partial void UpdateConsultations(Consultations instance);
    partial void DeleteConsultations(Consultations instance);
    partial void InsertDomains(Domains instance);
    partial void UpdateDomains(Domains instance);
    partial void DeleteDomains(Domains instance);
    partial void InsertFacts(Facts instance);
    partial void UpdateFacts(Facts instance);
    partial void DeleteFacts(Facts instance);
    partial void InsertRules(Rules instance);
    partial void UpdateRules(Rules instance);
    partial void DeleteRules(Rules instance);
    partial void InsertValues(Values instance);
    partial void UpdateValues(Values instance);
    partial void DeleteValues(Values instance);
    partial void InsertVariables(Variables instance);
    partial void UpdateVariables(Variables instance);
    partial void DeleteVariables(Variables instance);
    partial void InsertVarTypes(VarTypes instance);
    partial void UpdateVarTypes(VarTypes instance);
    partial void DeleteVarTypes(VarTypes instance);
    #endregion
		
		public Db(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Db(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Db(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Db(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Conclusions> Conclusions
		{
			get
			{
				return this.GetTable<Conclusions>();
			}
		}
		
		public System.Data.Linq.Table<Consultations> Consultations
		{
			get
			{
				return this.GetTable<Consultations>();
			}
		}
		
		public System.Data.Linq.Table<Domains> Domains
		{
			get
			{
				return this.GetTable<Domains>();
			}
		}
		
		public System.Data.Linq.Table<Facts> Facts
		{
			get
			{
				return this.GetTable<Facts>();
			}
		}
		
		public System.Data.Linq.Table<Rules> Rules
		{
			get
			{
				return this.GetTable<Rules>();
			}
		}
		
		public System.Data.Linq.Table<Values> Values
		{
			get
			{
				return this.GetTable<Values>();
			}
		}
		
		public System.Data.Linq.Table<Variables> Variables
		{
			get
			{
				return this.GetTable<Variables>();
			}
		}
		
		public System.Data.Linq.Table<VarTypes> VarTypes
		{
			get
			{
				return this.GetTable<VarTypes>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Conclusions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _VariableID;
		
		private System.Nullable<int> _ValueID;
		
		private System.Nullable<int> _RuleID;
		
		private System.Nullable<int> _Number;
		
		private EntityRef<Rules> _Rules;
		
		private EntityRef<Values> _Values;
		
		private EntityRef<Variables> _Variables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVariableIDChanging(System.Nullable<int> value);
    partial void OnVariableIDChanged();
    partial void OnValueIDChanging(System.Nullable<int> value);
    partial void OnValueIDChanged();
    partial void OnRuleIDChanging(System.Nullable<int> value);
    partial void OnRuleIDChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    #endregion
		
		public Conclusions()
		{
			this._Rules = default(EntityRef<Rules>);
			this._Values = default(EntityRef<Values>);
			this._Variables = default(EntityRef<Variables>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariableID", DbType="Int")]
		public System.Nullable<int> VariableID
		{
			get
			{
				return this._VariableID;
			}
			set
			{
				if ((this._VariableID != value))
				{
					if (this._Variables.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariableIDChanging(value);
					this.SendPropertyChanging();
					this._VariableID = value;
					this.SendPropertyChanged("VariableID");
					this.OnVariableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueID", DbType="Int")]
		public System.Nullable<int> ValueID
		{
			get
			{
				return this._ValueID;
			}
			set
			{
				if ((this._ValueID != value))
				{
					if (this._Values.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueIDChanging(value);
					this.SendPropertyChanging();
					this._ValueID = value;
					this.SendPropertyChanged("ValueID");
					this.OnValueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int")]
		public System.Nullable<int> RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					if (this._Rules.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Conclusions", Storage="_Rules", ThisKey="RuleID", OtherKey="Id", IsForeignKey=true)]
		public Rules Rules
		{
			get
			{
				return this._Rules.Entity;
			}
			set
			{
				Rules previousValue = this._Rules.Entity;
				if (((previousValue != value) 
							|| (this._Rules.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules.Entity = null;
						previousValue.Conclusions.Remove(this);
					}
					this._Rules.Entity = value;
					if ((value != null))
					{
						value.Conclusions.Add(this);
						this._RuleID = value.Id;
					}
					else
					{
						this._RuleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rules");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Values_Conclusions", Storage="_Values", ThisKey="ValueID", OtherKey="Id", IsForeignKey=true)]
		public Values Values
		{
			get
			{
				return this._Values.Entity;
			}
			set
			{
				Values previousValue = this._Values.Entity;
				if (((previousValue != value) 
							|| (this._Values.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Values.Entity = null;
						previousValue.Conclusions.Remove(this);
					}
					this._Values.Entity = value;
					if ((value != null))
					{
						value.Conclusions.Add(this);
						this._ValueID = value.Id;
					}
					else
					{
						this._ValueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Values");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variables_Conclusions", Storage="_Variables", ThisKey="VariableID", OtherKey="Id", IsForeignKey=true)]
		public Variables Variables
		{
			get
			{
				return this._Variables.Entity;
			}
			set
			{
				Variables previousValue = this._Variables.Entity;
				if (((previousValue != value) 
							|| (this._Variables.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variables.Entity = null;
						previousValue.Conclusions.Remove(this);
					}
					this._Variables.Entity = value;
					if ((value != null))
					{
						value.Conclusions.Add(this);
						this._VariableID = value.Id;
					}
					else
					{
						this._VariableID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Variables");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Consultations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Date;
		
		private string _Goal;
		
		private string _Result;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnGoalChanging(string value);
    partial void OnGoalChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    #endregion
		
		public Consultations()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goal", DbType="NVarChar(100)")]
		public string Goal
		{
			get
			{
				return this._Goal;
			}
			set
			{
				if ((this._Goal != value))
				{
					this.OnGoalChanging(value);
					this.SendPropertyChanging();
					this._Goal = value;
					this.SendPropertyChanged("Goal");
					this.OnGoalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="NVarChar(4000)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Domains : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Values> _Values;
		
		private EntitySet<Variables> _Variables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Domains()
		{
			this._Values = new EntitySet<Values>(new Action<Values>(this.attach_Values), new Action<Values>(this.detach_Values));
			this._Variables = new EntitySet<Variables>(new Action<Variables>(this.attach_Variables), new Action<Variables>(this.detach_Variables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domains_Values", Storage="_Values", ThisKey="Id", OtherKey="DomainID")]
		public EntitySet<Values> Values
		{
			get
			{
				return this._Values;
			}
			set
			{
				this._Values.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domains_Variables", Storage="_Variables", ThisKey="Id", OtherKey="DomainID")]
		public EntitySet<Variables> Variables
		{
			get
			{
				return this._Variables;
			}
			set
			{
				this._Variables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Values(Values entity)
		{
			this.SendPropertyChanging();
			entity.Domains = this;
		}
		
		private void detach_Values(Values entity)
		{
			this.SendPropertyChanging();
			entity.Domains = null;
		}
		
		private void attach_Variables(Variables entity)
		{
			this.SendPropertyChanging();
			entity.Domains = this;
		}
		
		private void detach_Variables(Variables entity)
		{
			this.SendPropertyChanging();
			entity.Domains = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Facts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _VariableID;
		
		private System.Nullable<int> _ValueID;
		
		private System.Nullable<int> _RuleID;
		
		private System.Nullable<int> _Number;
		
		private EntityRef<Rules> _Rules;
		
		private EntityRef<Values> _Values;
		
		private EntityRef<Variables> _Variables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVariableIDChanging(System.Nullable<int> value);
    partial void OnVariableIDChanged();
    partial void OnValueIDChanging(System.Nullable<int> value);
    partial void OnValueIDChanged();
    partial void OnRuleIDChanging(System.Nullable<int> value);
    partial void OnRuleIDChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    #endregion
		
		public Facts()
		{
			this._Rules = default(EntityRef<Rules>);
			this._Values = default(EntityRef<Values>);
			this._Variables = default(EntityRef<Variables>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariableID", DbType="Int")]
		public System.Nullable<int> VariableID
		{
			get
			{
				return this._VariableID;
			}
			set
			{
				if ((this._VariableID != value))
				{
					if (this._Variables.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariableIDChanging(value);
					this.SendPropertyChanging();
					this._VariableID = value;
					this.SendPropertyChanged("VariableID");
					this.OnVariableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueID", DbType="Int")]
		public System.Nullable<int> ValueID
		{
			get
			{
				return this._ValueID;
			}
			set
			{
				if ((this._ValueID != value))
				{
					if (this._Values.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueIDChanging(value);
					this.SendPropertyChanging();
					this._ValueID = value;
					this.SendPropertyChanged("ValueID");
					this.OnValueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int")]
		public System.Nullable<int> RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					if (this._Rules.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Facts", Storage="_Rules", ThisKey="RuleID", OtherKey="Id", IsForeignKey=true)]
		public Rules Rules
		{
			get
			{
				return this._Rules.Entity;
			}
			set
			{
				Rules previousValue = this._Rules.Entity;
				if (((previousValue != value) 
							|| (this._Rules.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rules.Entity = null;
						previousValue.Facts.Remove(this);
					}
					this._Rules.Entity = value;
					if ((value != null))
					{
						value.Facts.Add(this);
						this._RuleID = value.Id;
					}
					else
					{
						this._RuleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rules");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Values_Facts", Storage="_Values", ThisKey="ValueID", OtherKey="Id", IsForeignKey=true)]
		public Values Values
		{
			get
			{
				return this._Values.Entity;
			}
			set
			{
				Values previousValue = this._Values.Entity;
				if (((previousValue != value) 
							|| (this._Values.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Values.Entity = null;
						previousValue.Facts.Remove(this);
					}
					this._Values.Entity = value;
					if ((value != null))
					{
						value.Facts.Add(this);
						this._ValueID = value.Id;
					}
					else
					{
						this._ValueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Values");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variables_Facts", Storage="_Variables", ThisKey="VariableID", OtherKey="Id", IsForeignKey=true)]
		public Variables Variables
		{
			get
			{
				return this._Variables.Entity;
			}
			set
			{
				Variables previousValue = this._Variables.Entity;
				if (((previousValue != value) 
							|| (this._Variables.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variables.Entity = null;
						previousValue.Facts.Remove(this);
					}
					this._Variables.Entity = value;
					if ((value != null))
					{
						value.Facts.Add(this);
						this._VariableID = value.Id;
					}
					else
					{
						this._VariableID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Variables");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Rules : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Explain;
		
		private System.Nullable<int> _Number;
		
		private EntitySet<Conclusions> _Conclusions;
		
		private EntitySet<Facts> _Facts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExplainChanging(string value);
    partial void OnExplainChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    #endregion
		
		public Rules()
		{
			this._Conclusions = new EntitySet<Conclusions>(new Action<Conclusions>(this.attach_Conclusions), new Action<Conclusions>(this.detach_Conclusions));
			this._Facts = new EntitySet<Facts>(new Action<Facts>(this.attach_Facts), new Action<Facts>(this.detach_Facts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="explain", Storage="_Explain", DbType="NVarChar(4000)")]
		public string Explain
		{
			get
			{
				return this._Explain;
			}
			set
			{
				if ((this._Explain != value))
				{
					this.OnExplainChanging(value);
					this.SendPropertyChanging();
					this._Explain = value;
					this.SendPropertyChanged("Explain");
					this.OnExplainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="number", Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Conclusions", Storage="_Conclusions", ThisKey="Id", OtherKey="RuleID")]
		public EntitySet<Conclusions> Conclusions
		{
			get
			{
				return this._Conclusions;
			}
			set
			{
				this._Conclusions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rules_Facts", Storage="_Facts", ThisKey="Id", OtherKey="RuleID")]
		public EntitySet<Facts> Facts
		{
			get
			{
				return this._Facts;
			}
			set
			{
				this._Facts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conclusions(Conclusions entity)
		{
			this.SendPropertyChanging();
			entity.Rules = this;
		}
		
		private void detach_Conclusions(Conclusions entity)
		{
			this.SendPropertyChanging();
			entity.Rules = null;
		}
		
		private void attach_Facts(Facts entity)
		{
			this.SendPropertyChanging();
			entity.Rules = this;
		}
		
		private void detach_Facts(Facts entity)
		{
			this.SendPropertyChanging();
			entity.Rules = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Values : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _DomainID;
		
		private System.Nullable<int> _Number;
		
		private EntitySet<Conclusions> _Conclusions;
		
		private EntitySet<Facts> _Facts;
		
		private EntityRef<Domains> _Domains;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDomainIDChanging(System.Nullable<int> value);
    partial void OnDomainIDChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    #endregion
		
		public Values()
		{
			this._Conclusions = new EntitySet<Conclusions>(new Action<Conclusions>(this.attach_Conclusions), new Action<Conclusions>(this.detach_Conclusions));
			this._Facts = new EntitySet<Facts>(new Action<Facts>(this.attach_Facts), new Action<Facts>(this.detach_Facts));
			this._Domains = default(EntityRef<Domains>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainID", DbType="Int")]
		public System.Nullable<int> DomainID
		{
			get
			{
				return this._DomainID;
			}
			set
			{
				if ((this._DomainID != value))
				{
					if (this._Domains.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDomainIDChanging(value);
					this.SendPropertyChanging();
					this._DomainID = value;
					this.SendPropertyChanged("DomainID");
					this.OnDomainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Values_Conclusions", Storage="_Conclusions", ThisKey="Id", OtherKey="ValueID")]
		public EntitySet<Conclusions> Conclusions
		{
			get
			{
				return this._Conclusions;
			}
			set
			{
				this._Conclusions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Values_Facts", Storage="_Facts", ThisKey="Id", OtherKey="ValueID")]
		public EntitySet<Facts> Facts
		{
			get
			{
				return this._Facts;
			}
			set
			{
				this._Facts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domains_Values", Storage="_Domains", ThisKey="DomainID", OtherKey="Id", IsForeignKey=true)]
		public Domains Domains
		{
			get
			{
				return this._Domains.Entity;
			}
			set
			{
				Domains previousValue = this._Domains.Entity;
				if (((previousValue != value) 
							|| (this._Domains.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domains.Entity = null;
						previousValue.Values.Remove(this);
					}
					this._Domains.Entity = value;
					if ((value != null))
					{
						value.Values.Add(this);
						this._DomainID = value.Id;
					}
					else
					{
						this._DomainID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Domains");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conclusions(Conclusions entity)
		{
			this.SendPropertyChanging();
			entity.Values = this;
		}
		
		private void detach_Conclusions(Conclusions entity)
		{
			this.SendPropertyChanging();
			entity.Values = null;
		}
		
		private void attach_Facts(Facts entity)
		{
			this.SendPropertyChanging();
			entity.Values = this;
		}
		
		private void detach_Facts(Facts entity)
		{
			this.SendPropertyChanging();
			entity.Values = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Variables : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Type;
		
		private System.Nullable<int> _DomainID;
		
		private string _Question;
		
		private EntitySet<Conclusions> _Conclusions;
		
		private EntitySet<Facts> _Facts;
		
		private EntityRef<Domains> _Domains;
		
		private EntityRef<VarTypes> _VarTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDomainIDChanging(System.Nullable<int> value);
    partial void OnDomainIDChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    #endregion
		
		public Variables()
		{
			this._Conclusions = new EntitySet<Conclusions>(new Action<Conclusions>(this.attach_Conclusions), new Action<Conclusions>(this.detach_Conclusions));
			this._Facts = new EntitySet<Facts>(new Action<Facts>(this.attach_Facts), new Action<Facts>(this.detach_Facts));
			this._Domains = default(EntityRef<Domains>);
			this._VarTypes = default(EntityRef<VarTypes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="type", Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="domainID", Storage="_DomainID", DbType="Int")]
		public System.Nullable<int> DomainID
		{
			get
			{
				return this._DomainID;
			}
			set
			{
				if ((this._DomainID != value))
				{
					this.OnDomainIDChanging(value);
					this.SendPropertyChanging();
					this._DomainID = value;
					this.SendPropertyChanged("DomainID");
					this.OnDomainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="question", Storage="_Question", DbType="NVarChar(4000)")]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variables_Conclusions", Storage="_Conclusions", ThisKey="Id", OtherKey="VariableID")]
		public EntitySet<Conclusions> Conclusions
		{
			get
			{
				return this._Conclusions;
			}
			set
			{
				this._Conclusions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variables_Facts", Storage="_Facts", ThisKey="Id", OtherKey="VariableID")]
		public EntitySet<Facts> Facts
		{
			get
			{
				return this._Facts;
			}
			set
			{
				this._Facts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domains_Variables", Storage="_Domains", ThisKey="DomainID", OtherKey="Id", IsForeignKey=true)]
		public Domains Domains
		{
			get
			{
				return this._Domains.Entity;
			}
			set
			{
				Domains previousValue = this._Domains.Entity;
				if (((previousValue != value) 
							|| (this._Domains.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domains.Entity = null;
						previousValue.Variables.Remove(this);
					}
					this._Domains.Entity = value;
					if ((value != null))
					{
						value.Variables.Add(this);
						this._DomainID = value.Id;
					}
					else
					{
						this._DomainID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Domains");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VarTypes_Variables", Storage="_VarTypes", ThisKey="Type", OtherKey="Id", IsForeignKey=true)]
		public VarTypes VarTypes
		{
			get
			{
				return this._VarTypes.Entity;
			}
			set
			{
				VarTypes previousValue = this._VarTypes.Entity;
				if (((previousValue != value) 
							|| (this._VarTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VarTypes.Entity = null;
						previousValue.Variables.Remove(this);
					}
					this._VarTypes.Entity = value;
					if ((value != null))
					{
						value.Variables.Add(this);
						this._Type = value.Id;
					}
					else
					{
						this._Type = default(int);
					}
					this.SendPropertyChanged("VarTypes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conclusions(Conclusions entity)
		{
			this.SendPropertyChanging();
			entity.Variables = this;
		}
		
		private void detach_Conclusions(Conclusions entity)
		{
			this.SendPropertyChanging();
			entity.Variables = null;
		}
		
		private void attach_Facts(Facts entity)
		{
			this.SendPropertyChanging();
			entity.Variables = this;
		}
		
		private void detach_Facts(Facts entity)
		{
			this.SendPropertyChanging();
			entity.Variables = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class VarTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Variables> _Variables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public VarTypes()
		{
			this._Variables = new EntitySet<Variables>(new Action<Variables>(this.attach_Variables), new Action<Variables>(this.detach_Variables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VarTypes_Variables", Storage="_Variables", ThisKey="Id", OtherKey="Type")]
		public EntitySet<Variables> Variables
		{
			get
			{
				return this._Variables;
			}
			set
			{
				this._Variables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Variables(Variables entity)
		{
			this.SendPropertyChanging();
			entity.VarTypes = this;
		}
		
		private void detach_Variables(Variables entity)
		{
			this.SendPropertyChanging();
			entity.VarTypes = null;
		}
	}
}
#pragma warning restore 1591
